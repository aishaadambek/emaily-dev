const passport = require('passport');
const mongoose = require('mongoose');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys'); // sensible data to be stored separately

// Get data from MongoDB (this is a Model class, i.e. Collection from MongoDB)
const User = mongoose.model('users');

/**
 *	Generates identifying piece of information for a logging in user
 *	to be used to set a Cookie in the following requests/queries 
 *	- 1st arg [user] = the model instance that comes from Google oauth flow
 * 	- 2nd arg [done] = callback function
 *	passport will take care of setting a token for a cookie
 */
passport.serializeUser((user, done) => {
	// user.id = unique [and applicable for each] ID generated by MongoDB 
	done(null, user.id);
});

passport.deserializeUser((id, done) => {
	User.findByID(id).then(user => {
		done(null, user);
	});
});

// Generic register that says to passport how to deal
// with Google Authentication
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback'
		},
		// Callback function
		(accessToken, refreshToken, profile, done) => {
			// This is a Promise to deal with asynchronous MongoDB query 
			User.findOne({ googleId: profile.id })
				.then((existingUser) => {
					if (existingUser) { 
						// We already have the record with this ID
						/**
						 *	done() function to make sure that the program understands
						 *	that we have dealt with passport and ready to return to oauth flow
						 *	- 1st arg: whether there was an error
						 */
						done(null, existingUser);
					} else { 
						// Save the Model Instance from mongoose to an actual MongoDB database
						new User({ googleId: profile.id })
							.save()
							.then(user => done(null, user));
					}
				});
		}
	)
);

/**
 *	ADDITIONAL:
 *	1 - the token that allows us to read user's profile BUT 
 *	no need in it really in this app
 *	-- console.log('access token', accessToken);
 *	2 - used to update the access token
 *	-- console.log('refresh token', refreshToken);
 *	3 - all profile info to be monitored in the database
 *	-- console.log('profile: ', profile);
*/
